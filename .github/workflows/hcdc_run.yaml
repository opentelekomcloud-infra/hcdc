name: Run HCDC on the PR branch

on:
  pull_request:

jobs:
  get-token:
    runs-on: ubuntu-latest
    env:
      OS_USERNAME: ${{ secrets.OTC_HCDC_USERNAME }}
      OS_PASSWORD: ${{ secrets.OTC_HCDC_PASSWORD }}
      OS_DOMAIN_NAME: ${{ secrets.OTC_HCDC_DOMAIN_NAME }}
      OS_PROJECT_NAME: ${{ secrets.OTC_HCDC_PROJECT_NAME }}
      PR_BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
      - name: Request body
        shell: bash
        run: |
          set -euo pipefail
          cat > body.json <<EOF
          {
            "auth": {
              "identity": {
                "methods": ["password"],
                "password": {
                  "user": {
                    "name": "${OS_USERNAME}",
                    "password": "${OS_PASSWORD}",
                    "domain": { "name": "${OS_DOMAIN_NAME}" }
                  }
                }
              },
              "scope": {
                "project": {
                  "name": "${OS_PROJECT_NAME}"
                }
              }
            }
          }
          EOF

      - name: Request token
        id: token
        shell: bash
        run: |
          set -euo pipefail

          headers=$(mktemp)
          code=$(curl -sS -w "%{http_code}" -o /dev/null -D "$headers" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -X POST "https://iam.eu-de.otc.t-systems.com/v3/auth/tokens" \
            -d @body.json)

          if [[ "$code" -lt 200 || "$code" -ge 300 ]]; then
            echo "Request failed"
            exit 1
          fi

          TOKEN=$(awk -F': ' 'BEGIN{IGNORECASE=1} /^X-Subject-Token/ {gsub("\r","",$2); print $2}' "$headers")

          if [[ -z "${TOKEN:-}" ]]; then
            echo "No X-Subject-Token found"
            exit 1
          fi
        
          echo "AUTH_TOKEN=$TOKEN" >> "$GITHUB_ENV"
          echo "::add-mask::$TOKEN"
          

      - name: Run hcdc
        shell: bash
        run: |
          hcdc --branch "$PR_BRANCH"
